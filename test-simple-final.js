// ุงุฎุชุจุงุฑ ูุจุณุท ูุญุงูู ููููู PHP
const fetch = require('node-fetch');

console.log('๐ ุจุฏุก ุงุฎุชุจุงุฑ API ุฌูุณุงุช ุงูุชุณููุน...\n');

async function testAPI() {
    const baseUrl = 'http://localhost:8000/api';
    
    // ุงุฎุชุจุงุฑ 1: ุฌูุจ ุงูุฌูุณุงุช ุงูููุฌูุฏุฉ
    console.log('1๏ธโฃ ุฌูุจ ุงูุฌูุณุงุช ุงูููุฌูุฏุฉ...');
    try {
        const response = await fetch(`${baseUrl}/recitation/sessions`);
        const data = await response.json();
        console.log(`โ ุชู ุฌูุจ ${data.data?.total || 0} ุฌูุณุฉ`);
        console.log('');
    } catch (error) {
        console.log(`โ ุฎุทุฃ ูู ุฌูุจ ุงูุฌูุณุงุช: ${error.message}`);
        return;
    }
    
    // ุงุฎุชุจุงุฑ 2: ุฅูุดุงุก ุฌูุณุฉ ุฌุฏูุฏุฉ - ููุณ ุงูุจูุงูุงุช ูู ุงูููู PHP
    console.log('2๏ธโฃ ุฅูุดุงุก ุฌูุณุฉ ุฌุฏูุฏุฉ...');
    
    const sessionData = {
        student_id: 1,
        teacher_id: 1,
        quran_circle_id: 1,
        start_surah_number: 1,
        start_verse: 1,
        end_surah_number: 1,
        end_verse: 7,
        recitation_type: 'ุญูุธ',
        duration_minutes: 15,
        grade: 9.5,
        evaluation: 'ููุชุงุฒ',
        teacher_notes: 'ุญูุธ ููุชุงุฒ ูุณูุฑุฉ ุงููุงุชุญุฉ'
    };
    
    console.log('ุงูุจูุงูุงุช ุงููุฑุณูุฉ:');
    console.log(JSON.stringify(sessionData, null, 2));
    console.log('');
    
    try {
        const response = await fetch(`${baseUrl}/recitation/sessions`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify(sessionData)
        });
        
        const result = await response.text();
        console.log(`ุงูุงุณุชุฌุงุจุฉ ุงูุฎุงู: ${result}`);
        console.log('');
        
        if (response.ok) {
            const data = JSON.parse(result);
            if (data.success) {
                console.log(`โ ูุฌุญ ุฅูุดุงุก ุงูุฌูุณุฉ: ${data.session_id}`);
                
                // ุงุฎุชุจุงุฑ ุฅุถุงูุฉ ุฎุทุฃ
                console.log('\n3๏ธโฃ ุฅุถุงูุฉ ุฎุทุฃ ููุฌูุณุฉ...');
                const errorData = {
                    session_id: data.session_id,
                    error_type: 'ูุทู',
                    error_description: 'ุฎุทุฃ ูู ูุทู ูููุฉ "ุงูุฑุญูู"',
                    surah_number: 1,
                    verse_number: 3,
                    word_position: 2,
                    severity: 'ูุชูุณุท',
                    correction_provided: true,
                    notes: 'ุชู ุชุตุญูุญ ุงููุทู ูุจุงุดุฑุฉ'
                };
                
                const errorResponse = await fetch(`${baseUrl}/recitation/errors`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify(errorData)
                });
                
                const errorResult = await errorResponse.text();
                console.log(`ุงุณุชุฌุงุจุฉ ุฅุถุงูุฉ ุงูุฎุทุฃ: ${errorResult}`);
                
                if (errorResponse.ok) {
                    console.log('โ ุชู ุฅุถุงูุฉ ุงูุฎุทุฃ ุจูุฌุงุญ');
                } else {
                    console.log('โ ูุดู ุฅุถุงูุฉ ุงูุฎุทุฃ');
                }
                
            } else {
                console.log(`โ ูุดู ุฅูุดุงุก ุงูุฌูุณุฉ: ${data.message}`);
                if (data.errors) {
                    console.log('ุงูุฃุฎุทุงุก:');
                    Object.keys(data.errors).forEach(field => {
                        console.log(`- ${field}: ${data.errors[field]}`);
                    });
                }
            }
        } else {
            console.log(`โ ูุดู ุงูุทูุจ: ${response.status} - ${response.statusText}`);
            try {
                const errorData = JSON.parse(result);
                if (errorData.errors) {
                    console.log('ุชูุงุตูู ุงูุฃุฎุทุงุก:');
                    Object.keys(errorData.errors).forEach(field => {
                        console.log(`- ${field}: ${errorData.errors[field]}`);
                    });
                }
            } catch (e) {
                console.log('ูุง ูููู ุชุญููู ุฑุณุงูุฉ ุงูุฎุทุฃ');
            }
        }
    } catch (error) {
        console.log(`โ ุฎุทุฃ ูู ุงูุงุชุตุงู: ${error.message}`);
    }
    
    console.log('\n๐ ุงูุชูู ุงูุงุฎุชุจุงุฑ!');
}

testAPI();
