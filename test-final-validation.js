// Test file to validate exact API requirements
const https = require('http');

async function testRecitationAPI() {
    console.log('üéØ ÿßÿÆÿ™ÿ®ÿßÿ± ÿ¥ÿßŸÖŸÑ ŸÑŸÄ API ÿßŸÑÿ™ÿ≥ŸÖŸäÿπ...\n');

    // 1. Test GET first to see what data exists
    console.log('=== 1. ŸÅÿ≠ÿµ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖŸàÿ¨ŸàÿØÿ© ===');
    await testGet();

    // 2. Test with exact values from existing sessions
    console.log('\n=== 2. ÿßÿÆÿ™ÿ®ÿßÿ± ÿ•ŸÜÿ¥ÿßÿ° ÿ¨ŸÑÿ≥ÿ© ÿ®ŸÇŸäŸÖ ŸÖÿ∑ÿßÿ®ŸÇÿ© ===');
    await testPostWithExactValues();

    // 3. Test individual field validation
    console.log('\n=== 3. ÿßÿÆÿ™ÿ®ÿßÿ± ÿ≠ŸÇŸàŸÑ ŸÖÿ≠ÿØÿØÿ© ===');
    await testFieldValidation();
}

async function testGet() {
    try {
        const response = await fetch('http://localhost:8000/api/recitation/sessions/');
        const data = await response.json();
        
        if (data.success && data.sessions && data.sessions.length > 0) {
            console.log(`‚úÖ ÿ™ŸÖ ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ ${data.sessions.length} ÿ¨ŸÑÿ≥ÿ© ŸÖŸàÿ¨ŸàÿØÿ©`);
            
            // Show first session structure
            const firstSession = data.sessions[0];
            console.log('\nüìã ÿ®ŸÜŸäÿ© ÿ£ŸàŸÑ ÿ¨ŸÑÿ≥ÿ©:');
            console.log(`- recitation_type: "${firstSession.recitation_type}"`);
            console.log(`- evaluation: "${firstSession.evaluation}"`);
            console.log(`- student_id: ${firstSession.student_id}`);
            console.log(`- teacher_id: ${firstSession.teacher_id}`);
            
            return firstSession;
        } else {
            console.log('‚ö†Ô∏è ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ¨ŸÑÿ≥ÿßÿ™ ŸÖŸàÿ¨ŸàÿØÿ©');
            return null;
        }
    } catch (error) {
        console.error('‚ùå ÿÆÿ∑ÿ£ ŸÅŸä GET:', error.message);
        return null;
    }
}

async function testPostWithExactValues() {
    // Use exact values that we know work
    const testData = {
        student_id: 1,
        teacher_id: 1,
        quran_circle_id: 1,
        start_surah_number: 2,
        start_verse: 1,
        end_surah_number: 2,
        end_verse: 5,
        recitation_type: "ÿ≠ŸÅÿ∏",  // Exact Arabic value
        duration_minutes: 10,
        grade: 9.0,
        evaluation: "ŸÖŸÖÿ™ÿßÿ≤",    // Exact Arabic value
        teacher_notes: "ÿßÿÆÿ™ÿ®ÿßÿ± API"
    };

    try {
        console.log('üì§ ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™:', JSON.stringify(testData, null, 2));
        
        const response = await fetch('http://localhost:8000/api/recitation/sessions/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify(testData)
        });

        const result = await response.json();
        
        console.log(`üì® HTTP Status: ${response.status}`);
        console.log('üì® Response:', JSON.stringify(result, null, 2));

        if (response.ok && result.success) {
            console.log('‚úÖ ŸÜÿ¨ÿ≠ ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ¨ŸÑÿ≥ÿ©!');
        } else {
            console.log('‚ùå ŸÅÿ¥ŸÑ ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ¨ŸÑÿ≥ÿ©');
            if (result.errors) {
                console.log('\nüìã ÿ™ŸÅÿßÿµŸäŸÑ ÿßŸÑÿ£ÿÆÿ∑ÿßÿ°:');
                Object.entries(result.errors).forEach(([field, errors]) => {
                    console.log(`- ${field}: ${errors.join(', ')}`);
                });
            }
        }
    } catch (error) {
        console.error('‚ùå ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑÿ¥ÿ®ŸÉÿ©:', error.message);
    }
}

async function testFieldValidation() {
    console.log('üîç ÿßÿÆÿ™ÿ®ÿßÿ± ÿßŸÑŸÇŸäŸÖ ÿßŸÑŸÖÿ≥ŸÖŸàÿ≠ÿ©...\n');
    
    // Test recitation_type values
    const recitationTypes = ["ÿ≠ŸÅÿ∏", "ŸÖÿ±ÿßÿ¨ÿπÿ© ÿµÿ∫ÿ±Ÿâ", "ŸÖÿ±ÿßÿ¨ÿπÿ© ŸÉÿ®ÿ±Ÿâ", "ÿ™ÿ´ÿ®Ÿäÿ™"];
    const evaluations = ["ŸÖŸÖÿ™ÿßÿ≤", "ÿ¨ŸäÿØ ÿ¨ÿØÿßŸã", "ÿ¨ŸäÿØ", "ŸÖŸÇÿ®ŸàŸÑ", "ÿ∂ÿπŸäŸÅ"];
    
    console.log('üìã ÿ£ŸÜŸàÿßÿπ ÿßŸÑÿ™ÿ≥ŸÖŸäÿπ ÿßŸÑŸÖÿ™ŸàŸÇÿπÿ©:');
    recitationTypes.forEach(type => console.log(`  - "${type}"`));
    
    console.log('\nüìã ÿßŸÑÿ™ŸÇŸäŸäŸÖÿßÿ™ ÿßŸÑŸÖÿ™ŸàŸÇÿπÿ©:');
    evaluations.forEach(eval => console.log(`  - "${eval}"`));
    
    // Test with first valid combination
    const testData = {
        student_id: 1,
        teacher_id: 1,
        start_surah_number: 1,
        start_verse: 1,
        end_surah_number: 1,
        end_verse: 5,
        recitation_type: recitationTypes[0],
        evaluation: evaluations[0]
    };
    
    console.log('\nüß™ ÿßÿÆÿ™ÿ®ÿßÿ± ÿßŸÑŸÇŸäŸÖ ÿßŸÑÿ£ŸàŸÑŸâ...');
    await testSinglePost(testData);
}

async function testSinglePost(data) {
    try {
        const response = await fetch('http://localhost:8000/api/recitation/sessions/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify(data)
        });

        const result = await response.json();
        
        if (response.ok) {
            console.log('‚úÖ ŸÜÿ¨ÿ≠!');
        } else {
            console.log('‚ùå ŸÅÿ¥ŸÑ');
            if (result.errors) {
                Object.entries(result.errors).forEach(([field, errors]) => {
                    console.log(`  - ${field}: ${errors.join(', ')}`);
                });
            }
        }
    } catch (error) {
        console.error('‚ùå ÿÆÿ∑ÿ£:', error.message);
    }
}

// Run the test
testRecitationAPI().catch(console.error);
