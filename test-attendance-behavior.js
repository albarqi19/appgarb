// ุงุฎุชุจุงุฑ ุณููู ุงูุชุญุถูุฑ: ูู ููุดุฆ ุณุฌู ุฌุฏูุฏ ุฃู ูุนุฏู ุงูููุฌูุฏุ

const API_BASE_URL = 'http://127.0.0.1:8000/api';

async function testAttendanceBehavior() {
  console.log('๐งช ุงุฎุชุจุงุฑ ุณููู ุงูุชุญุถูุฑ: ุฅูุดุงุก ุณุฌู ุฌุฏูุฏ ุฃู ุชุนุฏูู ุงูููุฌูุฏุ');
  console.log('='.repeat(80));
  
  const today = new Date().toISOString().split('T')[0];
  const teacherId = '1';
  const mosqueId = '2';
  const studentName = 'ุณุนุฏูู';
  
  try {
    // ๐ ุฎุทูุฉ 1: ุฌูุจ ุงูุญุงูุฉ ุงูุญุงููุฉ
    console.log('\n๐ ุฎุทูุฉ 1: ุฌูุจ ุงูุญุงูุฉ ุงูุญุงููุฉ ููุทุงูุจ');
    console.log('-'.repeat(50));
    
    const currentUrl = `${API_BASE_URL}/attendance/records?date=${today}&teacher_id=${teacherId}&mosque_id=${mosqueId}`;
    console.log('๐ URL:', currentUrl);
    
    const currentResponse = await fetch(currentUrl);
    const currentData = await currentResponse.json();
    
    console.log('๐ฅ ุงูุจูุงูุงุช ุงูุญุงููุฉ:', JSON.stringify(currentData, null, 2));
    
    // ุงุณุชุฎุฑุงุฌ ุงูุญุงูุฉ ุงูุญุงููุฉ ููุทุงูุจ
    let currentStatus = 'ุบุงุฆุจ'; // ุงูุชุฑุงุถู
    if (currentData.success && currentData.data && currentData.data.data) {
      const records = currentData.data.data;
      const studentRecord = records.find(record => 
        (record.student_name || record.name || record.ุงุณู_ุงูุทุงูุจ) === studentName
      );
      if (studentRecord) {
        currentStatus = studentRecord.status || studentRecord.ุงูุญุงูุฉ || studentRecord.attendance_status || 'ุบุงุฆุจ';
      }
    }
    
    console.log(`๐ค ุงูุญุงูุฉ ุงูุญุงููุฉ ููุทุงูุจ "${studentName}": ${currentStatus}`);
    
    // ๐ ุฎุทูุฉ 2: ุชุญุฏูุฏ ุงูุญุงูุฉ ุงูุฌุฏูุฏุฉ (ุนูุณ ุงูุญุงูุฉ ุงูุญุงููุฉ)
    console.log('\n๐ ุฎุทูุฉ 2: ุชุญุฏูุฏ ุงูุญุงูุฉ ุงูุฌุฏูุฏุฉ');
    console.log('-'.repeat(50));
    
    let newStatus;
    switch(currentStatus) {
      case 'ุญุงุถุฑ': newStatus = 'ูุชุฃุฎุฑ'; break;
      case 'ูุชุฃุฎุฑ': newStatus = 'ุญุงุถุฑ'; break;
      case 'ูุณุชุฃุฐู': newStatus = 'ุญุงุถุฑ'; break;
      default: newStatus = 'ุญุงุถุฑ'; break;
    }
    
    console.log(`๐ฏ ุงูุญุงูุฉ ุงูุฌุฏูุฏุฉ ุงููุทููุจุฉ: ${currentStatus} โ ${newStatus}`);
    
    // ๐ ุฎุทูุฉ 3: ุนุฏ ุงูุณุฌูุงุช ูุจู ุงูุชุญุฏูุซ
    console.log('\n๐ ุฎุทูุฉ 3: ุนุฏ ุงูุณุฌูุงุช ูุจู ุงูุชุญุฏูุซ');
    console.log('-'.repeat(50));
    
    const recordsCountBefore = currentData.data?.data?.length || 0;
    console.log(`๐ ุนุฏุฏ ุงูุณุฌูุงุช ูุจู ุงูุชุญุฏูุซ: ${recordsCountBefore}`);
    
    // โ๏ธ ุฎุทูุฉ 4: ุฅุฑุณุงู ุงูุชุญุถูุฑ ุงูุฌุฏูุฏ
    console.log('\nโ๏ธ ุฎุทูุฉ 4: ุฅุฑุณุงู ุงูุชุญุถูุฑ ุงูุฌุฏูุฏ');
    console.log('-'.repeat(50));
    
    const markUrl = `${API_BASE_URL}/attendance/mark`;
    const markData = {
      teacher_id: parseInt(teacherId),
      date: today,
      time: new Date().toTimeString().split(' ')[0],
      students: [{
        student_name: studentName,
        status: newStatus,
        notes: `ุงุฎุชุจุงุฑ ุชุบููุฑ ูู ${currentStatus} ุฅูู ${newStatus} - ${new Date().toLocaleTimeString()}`
      }]
    };
    
    console.log('๐ URL:', markUrl);
    console.log('๐ค ุงูุจูุงูุงุช ุงููุฑุณูุฉ:', JSON.stringify(markData, null, 2));
    
    const markResponse = await fetch(markUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      body: JSON.stringify(markData)
    });
    
    const markResult = await markResponse.json();
    console.log('๐ฅ ูุชูุฌุฉ ุงูุชุญุฏูุซ:', JSON.stringify(markResult, null, 2));
    
    if (!markResponse.ok) {
      console.error('โ ูุดู ูู ุชุญุฏูุซ ุงูุชุญุถูุฑ');
      return;
    }
    
    // โฑ๏ธ ุงูุชุธุงุฑ ุซุงููุฉ ููุชุฃูุฏ ูู ุญูุธ ุงูุจูุงูุงุช
    console.log('\nโฑ๏ธ ุงูุชุธุงุฑ ุซุงููุฉ ูุงุญุฏุฉ...');
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // ๐ ุฎุทูุฉ 5: ุฌูุจ ุงูุจูุงูุงุช ูุฑุฉ ุฃุฎุฑู ููููุงุฑูุฉ
    console.log('\n๐ ุฎุทูุฉ 5: ุฌูุจ ุงูุจูุงูุงุช ุจุนุฏ ุงูุชุญุฏูุซ');
    console.log('-'.repeat(50));
    
    const afterResponse = await fetch(currentUrl);
    const afterData = await afterResponse.json();
    
    console.log('๐ฅ ุงูุจูุงูุงุช ุจุนุฏ ุงูุชุญุฏูุซ:', JSON.stringify(afterData, null, 2));
    
    // ๐ ุฎุทูุฉ 6: ุชุญููู ุงููุชุงุฆุฌ
    console.log('\n๐ ุฎุทูุฉ 6: ุชุญููู ุงููุชุงุฆุฌ');
    console.log('-'.repeat(50));
    
    const recordsCountAfter = afterData.data?.data?.length || 0;
    console.log(`๐ ุนุฏุฏ ุงูุณุฌูุงุช ุจุนุฏ ุงูุชุญุฏูุซ: ${recordsCountAfter}`);
    
    // ุงูุนุซูุฑ ุนูู ุณุฌู ุงูุทุงูุจ ุงูุฌุฏูุฏ
    let updatedStatus = 'ุบูุฑ ููุฌูุฏ';
    if (afterData.success && afterData.data && afterData.data.data) {
      const records = afterData.data.data;
      const studentRecord = records.find(record => 
        (record.student_name || record.name || record.ุงุณู_ุงูุทุงูุจ) === studentName
      );
      if (studentRecord) {
        updatedStatus = studentRecord.status || studentRecord.ุงูุญุงูุฉ || studentRecord.attendance_status || 'ุบูุฑ ูุญุฏุฏ';
      }
    }
    
    console.log(`๐ค ุงูุญุงูุฉ ุงูููุงุฆูุฉ ููุทุงูุจ "${studentName}": ${updatedStatus}`);
    
    // ๐ฏ ุฎุทูุฉ 7: ุงูุฎูุงุตุฉ ูุงูุชุญููู
    console.log('\n๐ฏ ุฎุทูุฉ 7: ุงูุฎูุงุตุฉ ูุงูุชุญููู');
    console.log('='.repeat(80));
    
    if (recordsCountBefore === recordsCountAfter) {
      console.log('โ ุงูุณููู: ุชู ุชุนุฏูู ุงูุณุฌู ุงูููุฌูุฏ (ูู ูุชุบูุฑ ุนุฏุฏ ุงูุณุฌูุงุช)');
      console.log(`๐ ุชูุงุตูู: ${currentStatus} โ ${updatedStatus}`);
    } else if (recordsCountAfter > recordsCountBefore) {
      console.log('โ ุงูุณููู: ุชู ุฅูุดุงุก ุณุฌู ุฌุฏูุฏ (ุฒุงุฏ ุนุฏุฏ ุงูุณุฌูุงุช)');
      console.log(`๐ ุชูุงุตูู: ุนุฏุฏ ุงูุณุฌูุงุช ${recordsCountBefore} โ ${recordsCountAfter}`);
    } else {
      console.log('โ ุงูุณููู: ุบูุฑ ูุชููุน (ูู ุนุฏุฏ ุงูุณุฌูุงุช)');
    }
    
    if (updatedStatus === newStatus) {
      console.log('โ ุงูุชุญุฏูุซ ูุฌุญ: ุงูุญุงูุฉ ุชุบูุฑุช ููุง ูู ูุทููุจ');
    } else {
      console.log('โ ุงูุชุญุฏูุซ ูุดู: ุงูุญุงูุฉ ูู ุชุชุบูุฑ ููุง ูู ูุทููุจ');
    }
    
  } catch (error) {
    console.error('๐ฅ ุฎุทุฃ ูู ุงูุงุฎุชุจุงุฑ:', error);
  }
}

testAttendanceBehavior().catch(console.error);
